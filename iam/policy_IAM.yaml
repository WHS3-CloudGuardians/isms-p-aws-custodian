# name too long
# action

policies:
  # 1) iam_administrator_access_with_mfa
  # ISMS-P: 2.4.x Multi-Factor Authentication
  # PURPOSE: Ensure users with AdministratorAccess have MFA enabled
  # ACTION PLAN: Invoke remediation Lambda, then send Slack notification
  - name: iam_administrator_access_with_mfa
    description: |
      Detects IAM users with AdministratorAccess but no MFA,
      then posts a Slack notification (no automatic enforcement).
    resource: aws.iam-user
    mode:
      type: periodic
      schedule: "rate(7 days)"
      role: arn:aws:iam::311278774159:role/custodian-my-role
    filters:
      - type: value
        key: AttachedManagedPolicies[].PolicyName
        op: contains
        value: AdministratorAccess
      - type: value
        key: MfaDevices
        op: eq
        value: 0
        value_type: size
    actions:
      - type: notify
        template: default
        template_format: slack
        violation_desc: "AdministratorAccess user without MFA detected."
        action_desc: "Please enroll MFA for this user to comply with policy."
        to:
          - "${SLACK_WEBHOOK_URL}"
        transport:
          type: sqs
          queue: https://sqs.ap-northeast-2.amazonaws.com/311278774159/custodian-my-queue


  # 2) iam_avoid_root_usage
  # ISMS-P: 2.1.3 Identity Management
  # PURPOSE: Avoid use of the root account
  # ACTION PLAN: Invoke remediation Lambda, then send Slack notification
  - name: iam_avoid_root_usage
    description: |
      Detects any API/CLI calls made with root credentials,
      then posts a Slack notification (no automatic revocation).
    resource: aws.account
    mode:
      type: periodic
      schedule: "rate(20 days)"
      role: arn:aws:iam::311278774159:role/custodian-my-role
    filters:
      - type: value
        key: RootAccountUsage
        op: eq
        value: true
    actions:
      - type: notify
        template: default
        template_format: slack
        violation_desc: "Root account usage detected."
        action_desc: "Please review and disable any unnecessary root credentials."
        to:
          - "${SLACK_WEBHOOK_URL}"
        transport:
          type: sqs
          queue: https://sqs.ap-northeast-2.amazonaws.com/311278774159/custodian-my-queue

  # 3) iam_aws_attached_policy_no_administrative_privileges   # name too long 
# ISMS-P: 2.4.3 Access Management
# PURPOSE: Disallow AWS-managed policies granting full admin privileges
# ACTION PLAN: Send Slack notification when violation detected
  - name: iam_aws_attached_policy_no_admin_privs
    resource: aws.iam-user
    mode:
      type: periodic
      schedule: rate(7 days)
      role: arn:aws:iam::311278774159:role/custodian-my-role
    filters:
      - type: value
        key: AttachedManagedPolicies[].PolicyArn
        op: contains
        value: arn:aws:iam::aws:policy/AdministratorAccess
    actions:
      - type: notify
        template: default
        template_format: slack
        violation_desc: "AWS-managed policy with admin privileges attached."
        action_desc: |
          1) Sent Slack notification for iam_aws_attached_policy_no_admin_privs.
          2) Confirm policy detach in IAM console.
        to:
          - "${SLACK_WEBHOOK_URL}"
        transport:
          type: sqs
          queue: https://sqs.ap-northeast-2.amazonaws.com/311278774159/custodian-my-queue


  # 4) iam_check_saml_providers_sts
  # ISMS-P: 2.3.5 Federation & SSO
  # PURPOSE: Ensure SAML providers support STS
  # ACTION PLAN: Update trust policy, then send Slack notification
  - name: iam_check_saml_providers_sts
    description: |
      Detects SAML providers whose ARN does not include sts.amazonaws.com,
      then posts a Slack notification.
    resource: aws.iam-saml-provider
    mode:
      type: periodic
      schedule: "rate(7 days)"
      role: arn:aws:iam::311278774159:role/custodian-my-role
    filters:
      - type: value
        key: Arn
        op: not-in
        value: "sts.amazonaws.com"
    actions:
      - type: notify
        template: default
        template_format: slack
        violation_desc: "SAML provider without STS support detected."
        action_desc: "Please update trust policy to include sts.amazonaws.com."
        to:
          - "${SLACK_WEBHOOK_URL}"
        transport:
          type: sqs
          queue: https://sqs.ap-northeast-2.amazonaws.com/311278774159/custodian-my-queue

# 5) iam_customer_attached_policy_no_administrative_privileges     # name too long 
# ISMS-P: 2.4.3 Access Management
# PURPOSE: Disallow customer-managed policies with full admin privileges when attached
# ACTION PLAN: Send Slack notification when violation detected
  - name: iam_cust_attached_no_admin
    description: |
      Detects customer-managed policies with `*:*` privileges that are attached,
      then posts a Slack notification.
    resource: aws.iam-policy
    mode:
      type: periodic
      schedule: rate(7 days)
      role: arn:aws:iam::311278774159:role/custodian-my-role
    filters:
      - type: value
        key: Arn
        op: contains
        value: ":policy/"
      - type: value
        key: AttachmentCount
        op: gt
        value: 0
      - type: value
        key: PolicyDocument.Statement[].Action
        op: contains
        value: "*:*"
    actions:
      - type: notify
        template: default
        template_format: slack
        violation_desc: "Attached customer policy with admin privileges found."
        action_desc: |
          1) Sent Slack notification for iam_cust_attached_no_admin.
          2) Confirm detach in IAM console.
        to:
          - "${SLACK_WEBHOOK_URL}"
        transport:
          type: sqs
          queue: https://sqs.ap-northeast-2.amazonaws.com/311278774159/custodian-my-queue


  # 6) iam_customer_unattached_policy_no_administrative_privileges     # name too long 
  # ISMS-P: 2.4.3 Access Management
  # PURPOSE: Disallow customer-managed policies with full admin privileges when unattached
  # ACTION PLAN: send Slack notification
  - name: iam_cust_unattached_no_admin
    description: |
       Detects unattached customer-managed policies that allow all actions,
       then sends a Slack notification.
    resource: aws.iam-policy
    mode:
      type: periodic
      schedule: "rate(7 days)"
      role: arn:aws:iam::311278774159:role/custodian-my-role
    filters:
      - type: has-allow-all
      - type: value
        key: AttachmentCount
        op: eq
        value: 0
    actions:
      - type: notify
        template: default
        template_format: slack
        violation_desc: "Unattached customer-managed policy with admin privileges detected."
        action_desc: |
          Policy {{ policy.policy_name }} (ARN: {{ policy.arn }}) is unattached and grants full privileges.
          Please review and delete this policy in the IAM console if appropriate.
        to:
          - "${SLACK_WEBHOOK_URL}"
        transport:
          type: sqs
          queue: https://sqs.ap-northeast-2.amazonaws.com/311278774159/custodian-my-queue

  # 7) iam_group_administrator_access_policy
  # ISMS-P: 2.4.3 Access Management
  # PURPOSE: Prevent AdministratorAccess from being attached to any IAM group
  # ACTION PLAN: send Slack notification
  - name: iam_group_administrator_access_policy
    description: |
      Detects IAM groups with AdministratorAccess attached,
      then sends a Slack notification.
    resource: aws.iam-group
    mode:
      type: periodic
      schedule: "rate(7 days)"
      role: arn:aws:iam::311278774159:role/custodian-my-role
    filters:
      - type: value
        key: AttachedManagedPolicies[].PolicyName
        op: contains
        value: AdministratorAccess
    actions:
      - type: notify
        template: default
        template_format: slack
        violation_desc: "Group with AdministratorAccess found."
        action_desc: |
          Group `{{ group.group_name }}` has the AdministratorAccess policy attached.
          Please review and detach this policy in the IAM console if appropriate.
        to:
          - "${SLACK_WEBHOOK_URL}"
        transport:
          type: sqs
          queue: https://sqs.ap-northeast-2.amazonaws.com/311278774159/custodian-my-queue

  # 8) iam_inline_policy_allows_privilege_escalation
  # ISMS-P: 2.4.3 Access Management
  # PURPOSE: Disallow inline policies that allow privilege escalation
  # ACTION PLAN: Send Slack notification when violation detected
  - name: iam_inline_policy_allows_privilege_escalation
    description: |
      Detects IAM users whose inline policies include iam:PassRole,
      then posts a Slack notification.
    resource: aws.iam-user
    mode:
      type: periodic
      schedule: rate(7 days)
      role: arn:aws:iam::311278774159:role/custodian-my-role
    filters:
      - type: value
        key: InlinePolicies[].PolicyDocument.Statement[].Action
        op: contains
        value: iam:PassRole
    actions:
      - type: notify
        template: default
        template_format: slack
        violation_desc: "Inline policy allowing privilege escalation detected."
        action_desc: |
          1) Sent Slack notification for iam_inline_policy_allows_privilege_escalation.
          2) Confirm policy updates in AWS IAM console.
        to:
          - "${SLACK_WEBHOOK_URL}"
        transport:
          type: sqs
          queue: https://sqs.ap-northeast-2.amazonaws.com/311278774159/custodian-my-queue

  # 9) iam_inline_policy_no_administrative_privileges      # name too long 
  # ISMS-P: 2.4.3 Access Management
  # PURPOSE: Disallow inline policies granting full administrative privileges
  # ACTION PLAN: Send Slack notification when violation detected
  - name: iam_inline_no_admin_privs
    description: |
      Detects inline policies with `*:*` actions,
      then posts a Slack notification.
    resource: aws.iam-user
    mode:
      type: periodic
      schedule: rate(7 days)
      role: arn:aws:iam::311278774159:role/custodian-my-role
    filters:
      - type: value
        key: InlinePolicies[].PolicyDocument.Statement[].Action
        op: contains
        value: "*:*"
    actions:
      - type: notify
        template: default
        template_format: slack
        violation_desc: "Inline policy with administrative privileges detected."
        action_desc: |
          1) Sent Slack notification for iam_inline_no_admin_privs.
          2) Confirm removal in IAM console.
        to:
          - "${SLACK_WEBHOOK_URL}"
        transport:
          type: sqs
          queue: https://sqs.ap-northeast-2.amazonaws.com/311278774159/custodian-my-queue

  # 10) iam_inline_policy_no_full_access_to_cloudtrail
  # ISMS-P: 2.4.3 Access Management
  # PURPOSE: Disallow inline policies granting cloudtrail:* privileges
  # ACTION PLAN: Invoke a Lambda to remove offending statements, then Slack notification
  - name: iam_inline_policy_no_full_access_to_cloudtrail
    description: |
      Detects inline policies with cloudtrail:* privileges,
      then posts a Slack notification.
    resource: aws.iam-user
    mode:
      type: periodic
      schedule: "rate(7 days)"
      role: arn:aws:iam::311278774159:role/custodian-my-role
    filters:
      - type: value
        key: InlinePolicies[].PolicyDocument.Statement[].Action
        op: contains
        value: cloudtrail:*
    actions:
      - type: notify
        template: default
        template_format: slack
        violation_desc: "Inline policy with cloudtrail:* detected."
        action_desc: "Please remove cloudtrail:* statements from inline policies."
        to:
          - "${SLACK_WEBHOOK_URL}"
        transport:
          type: sqs
          queue: https://sqs.ap-northeast-2.amazonaws.com/311278774159/custodian-my-queue

  # 11) iam_inline_policy_no_full_access_to_kms
  # ISMS-P: 2.5.3 Key Management
  # PURPOSE: Disallow inline policies granting kms:* privileges
  # ACTION PLAN: Slack notification only
  - name: iam_inline_policy_no_full_access_to_kms
    description: |
      Detects inline policies with kms:* privileges,
      then posts a Slack notification.
    resource: aws.iam-user
    mode:
      type: periodic
      schedule: "rate(7 days)"
      role: arn:aws:iam::311278774159:role/custodian-my-role
    filters:
      - type: value
        key: InlinePolicies[].PolicyDocument.Statement[].Action
        op: contains
        value: kms:*
    actions:
      - type: notify
        template: default
        template_format: slack
        violation_desc: "Inline policy with kms:* detected."
        action_desc: "Please remove kms:* statements from inline policies."
        to:
          - "${SLACK_WEBHOOK_URL}"
        transport:
          type: sqs
          queue: https://sqs.ap-northeast-2.amazonaws.com/311278774159/custodian-my-queue

  # 12) iam_no_custom_policy_permissive_role_assumption      # name too long 
  # ISMS-P: 2.4.3 Access Management
  # PURPOSE: Disallow custom policies that allow sts:AssumeRole on *
  # ACTION PLAN: Invoke remediation Lambda, then send Slack notification
  - name: iam_no_custom_permissive_role_assumption   
    description: |
      Detects custom policies that allow sts:AssumeRole on *,
      then posts a Slack notification.
    resource: aws.iam-policy
    mode:
      type: periodic
      schedule: "rate(7 days)"
      role: arn:aws:iam::311278774159:role/custodian-my-role
    filters:
      - type: value
        key: PolicyDocument.Statement[].Action
        op: contains
        value: sts:AssumeRole
    actions:
      - type: notify
        template: default
        template_format: slack
        violation_desc: "Permissive AssumeRole policy detected."
        action_desc: |
          Custom policy `{{ policy.policy_name }}` allows `sts:AssumeRole` on all resources.
          Please review and tighten its scope in the IAM console.
        to:
          - "${SLACK_WEBHOOK_URL}"
        transport:
          type: sqs
          queue: https://sqs.ap-northeast-2.amazonaws.com/311278774159/custodian-my-queue

  # 13) iam_no_root_access_key
  # ISMS-P: 2.1.3 Identity Management
  # PURPOSE: Ensure no root account access key exists
  # ACTION PLAN: Invoke remediation Lambda, then send Slack notification
  - name: iam_no_root_access_key
    description: |
      Detects any access keys on the root account,
      then posts a Slack notification.
    resource: aws.account
    mode:
      type: periodic
      schedule: "rate(20 days)"
      role: arn:aws:iam::311278774159:role/custodian-my-role
    filters:
      - type: value
        key: RootAccessKeys
        op: gt
        value: 0
    actions:
      - type: notify
        template: default
        template_format: slack
        violation_desc: "Root access key detected."
        action_desc: "Please delete root access keys immediately."
        to:
          - "${SLACK_WEBHOOK_URL}"
        transport:
          type: sqs
          queue: https://sqs.ap-northeast-2.amazonaws.com/311278774159/custodian-my-queue

  # 14) iam_password_policy_expires_passwords_within_90_days_or_less    # name too long 
  # ISMS-P: 2.4.1 Identity Management
  # PURPOSE: Ensure password expiration more than 90 days
  # ACTION PLAN: Enforce 90-day password rotation when violation detected(detect only)
  - name: iam_pwd_exp_90d
    description: |
      Detects password policies that do not expire passwords within 90 days.
    resource: aws.account
    filters:
      - type: value
        key: PasswordPolicy.ExpirePasswords
        op: eq
        value: false
    actions: []

 # 15) iam_password_policy_lowercase
  # ISMS-P: 2.4.1 Identity Management
  # PURPOSE: Ensure password contains at least one lowercase character
  # ACTION PLAN: detect only
  - name: iam_password_policy_lowercase
    description: |
      Detects password policies that do not require lowercase characters.
    resource: aws.account
    filters:
      - type: value
        key: PasswordPolicy.RequireLowercaseCharacters
        op: eq
        value: false
    actions: []

  # 16) iam_password_policy_minimum_length_14
  # ISMS-P: 2.4.1 Identity Management
  # PURPOSE: Ensure password length is less than 14 characters
  # ACTION PLAN: Slack notification only
  - name: iam_password_policy_minimum_length_14
    description: |
      Detects password policies enforcing less than 14 characters,
      then posts a Slack notification.
    resource: aws.account
    mode:
      type: periodic
      schedule: "rate(5 minutes)" # check please
      role: arn:aws:iam::311278774159:role/custodian-my-role
    filters:
      - type: value
        key: PasswordPolicy.MinimumPasswordLength
        op: lt
        value: 14
    actions:
      - type: notify
        template: default
        template_format: slack
        violation_desc: "Password minimum length < 14."
        action_desc: "Please set minimum password length to 14."
        to:
          - "${SLACK_WEBHOOK_URL}"
        transport:
          type: sqs
          queue: https://sqs.ap-northeast-2.amazonaws.com/311278774159/custodian-my-queue

  # 17) iam_password_policy_number
  # ISMS-P: 2.4.1 Identity Management
  # PURPOSE: Ensure password contains at least one numeric character
  # ACTION PLAN: Slack notification only
  - name: iam_password_policy_number
    description: |
      Detects password policies that do not require numbers,
      then posts a Slack notification.
    resource: aws.account
    mode:
      type: periodic
      schedule: "rate(5 minutes)" # check please
      role: arn:aws:iam::311278774159:role/custodian-my-role
    filters:
      - type: value
        key: PasswordPolicy.RequireNumbers
        op: eq
        value: false
    actions:
      - type: notify
        template: default
        template_format: slack
        violation_desc: "Password policy missing numeric requirement."
        action_desc: "Please require at least one numeric character."
        to:
          - "${SLACK_WEBHOOK_URL}"
        transport:
          type: sqs
          queue: https://sqs.ap-northeast-2.amazonaws.com/311278774159/custodian-my-queue

  # 18) iam_password_policy_reuse_24
  # ISMS-P: 2.4.1 Identity Management
  # PURPOSE: Ensure password reuse prevention count more than 24
  # ACTION PLAN: Slack notification only
  - name: iam_password_policy_reuse_24
    description: |
      Detects password policies allowing reuse fewer than 24 times,
      then posts a Slack notification.
    resource: aws.account
    filters:
      - type: value
        key: PasswordPolicy.PasswordReusePrevention
        op: lt
        value: 24
    actions:
      - type: notify
        template: default
        template_format: slack
        violation_desc: "Password reuse prevention count < 24."
        action_desc: "Please set password reuse prevention to 24."
        to:
          - "${SLACK_WEBHOOK_URL}"
        transport:
          type: sqs
          queue: https://sqs.ap-northeast-2.amazonaws.com/311278774159/custodian-my-queue

  # 19) iam_password_policy_symbol
  # ISMS-P: 2.4.1 Identity Management
  # PURPOSE: Ensure password contains at least one symbol
  # ACTION PLAN: Slack notification only
  - name: iam_password_policy_symbol
    description: |
      Detects password policies that do not require symbols,
      then posts a Slack notification.
    resource: aws.account
    filters:
      - type: value
        key: PasswordPolicy.RequireSymbols
        op: eq
        value: false
    actions:
      - type: notify
        template: default
        template_format: slack
        violation_desc: "Password policy missing symbol requirement."
        action_desc: "Please require at least one symbol."
        to:
          - "${SLACK_WEBHOOK_URL}"
        transport:
          type: sqs
          queue: https://sqs.ap-northeast-2.amazonaws.com/311278774159/custodian-my-queue

  # 20) iam_password_policy_uppercase
  # ISMS-P: 2.4.1 Identity Management
  # PURPOSE: Ensure password contains at least one uppercase character
  # ACTION PLAN: detect only
  - name: iam_password_policy_uppercase
    description: |
      Detects password policies that do not require uppercase letters.
    resource: aws.account
    filters:
      - type: value
        key: PasswordPolicy.RequireUppercaseCharacters
        op: eq
        value: false
    actions: []

  # 21) iam_policy_allows_privilege_escalation
  # ISMS-P: 2.4.3 Access Management
  # PURPOSE: Disallow policies that allow privilege escalation (PassRole)
  # ACTION PLAN: detect only
  - name: iam_policy_allows_privilege_escalation
    description: |
      Detects IAM policies that include iam:PassRole.
    resource: aws.iam-policy
    filters:
      - type: value
        key: PolicyDocument.Statement[].Action
        op: contains
        value: iam:PassRole
    actions: []

  # 22) iam_policy_attached_only_to_group_or_roles
  # ISMS-P: 2.4.3 Access Management
  # PURPOSE: Ensure policies are only attached to groups or roles
  # ACTION: Slack notification only
  - name: iam_policy_attached_only_to_group_or_roles
    description: |
      Detects IAM policies attached directly to individual users or groups,
      then posts a Slack notification for manual review.
    resource: aws.iam-policy
    mode:
      type: periodic
      schedule: "rate(50 days)"
      role: arn:aws:iam::311278774159:role/custodian-my-role
    filters:
      - type: value
        key: AttachedUsers
        op: greater-than
        value: 0
        value_type: size
      - type: value
        key: AttachedGroups
        op: greater-than
        value: 0
        value_type: size
    actions:
      - type: notify
        template: default
        template_format: slack
        violation_desc: "Policy attached to users or groups detected."
        action_desc: |
           Review which users or groups have this policy attached
           and manually detach it for remediation.
        to:
          - "${SLACK_WEBHOOK_URL}"
        transport:
          type: sqs
          queue: https://sqs.ap-northeast-2.amazonaws.com/311278774159/custodian-my-queue

  # 23) iam_policy_no_full_access_to_cloudtrail
  # ISMS-P: 2.2.1 Audit Logging
  # PURPOSE: Disallow policies granting cloudtrail:* privileges
  # ACTION PLAN: detect only
  - name: iam_policy_no_full_access_to_cloudtrail
    description: |
      Detects IAM policies that grant full CloudTrail privileges.
    resource: aws.iam-policy
    filters:
      - type: value
        key: PolicyDocument.Statement[].Action
        op: contains
        value: cloudtrail:*
    actions: []

  # 24) iam_policy_no_full_access_to_kms
  # ISMS-P: 2.5.3 Key Management
  # PURPOSE: Disallow policies granting kms:* privileges
  # ACTION PLAN: detect only
  - name: iam_policy_no_full_access_to_kms
    description: |
      Detects IAM policies that grant full KMS privileges.
    resource: aws.iam-policy
    filters:
      - type: value
        key: PolicyDocument.Statement[].Action
        op: contains
        value: kms:*
    actions: []

  # 25) iam_role_cross_service_confused_deputy_prevention
  # ISMS-P: 2.4.3 Access Management
  # PURPOSE: Prevent confused-deputy via cross-service role trust policy
  # ACTION PLAN: Slack notification only
  - name: iam_role_cross_service_confused_deputy_prevention
    description: |
      Detects IAM roles whose trust policy omits StringEquals condition.
    resource: aws.iam-role
    filters:
      - type: value
        key: AssumeRolePolicyDocument.Statement[].Condition
        op: not-in
        value: StringEquals
    actions: []

  # 26) iam_root_hardware_mfa_enabled
  # ISMS-P: 2.1.3 Identity Management
  # PURPOSE: Ensure root hardware MFA is enabled
  # ACTION PLAN: Slack notification only
  - name: iam_root_hardware_mfa_enabled
    description: |
      Detects if the root account has no hardware MFA configured,
      then posts a Slack notification.
    resource: aws.account
    mode:
      type: periodic
      schedule: "rate(50 days)"
      role: arn:aws:iam::311278774159:role/custodian-my-role
    filters:
      - type: value
        key: MFADevices
        op: eq
        value: 0
        value_type: size
    actions:
      - type: notify
        template: default
        template_format: slack
        violation_desc: "Root hardware MFA not enabled."
        action_desc: |
          Confirm hardware MFA is configured in the account settings.
        to: ["${SLACK_WEBHOOK_URL}"]
        transport:
          type: sqs
          queue: https://sqs.ap-northeast-2.amazonaws.com/311278774159/custodian-my-queue


  # 27) iam_root_mfa_enabled
  # ISMS-P: 2.1.3 Identity Management
  # PURPOSE: Ensure root account has any MFA
  # ACTION PLAN: Slack notification only
  - name: iam_root_mfa_enabled
    description: |
      Detects if the root account has no MFA devices at all,
      then posts a Slack notification.
    resource: aws.account
    mode:
      type: periodic
      schedule: "rate(20 days)"
      role: arn:aws:iam::311278774159:role/custodian-my-role
    filters:
      - type: value
        key: MFADevices
        op: eq
        value: 0
        value_type: size
    actions:
      - type: notify
        template: default
        template_format: slack
        violation_desc: "Root MFA not enabled."
        action_desc: "Please configure MFA (hardware or virtual) for root account."
        to:
          - "${SLACK_WEBHOOK_URL}"
        transport:
          type: sqs
          queue: https://sqs.ap-northeast-2.amazonaws.com/311278774159/custodian-my-queue

  # 28) iam_rotate_access_key_90_days
  # ISMS-P: 2.1.3 Identity Management
  # PURPOSE: Ensure access keys are rotated every 90 days
  # ACTION PLAN: Slack notification only
  - name: iam_rotate_access_key_90_days
    description: |
      Detects IAM user access keys last rotated over 90 days ago,
      then posts a Slack notification.
    resource: aws.iam-user
    filters:
      - type: credential
        key: access_keys.last_rotated
        op: gt
        value: 90
    actions:
      - type: notify
        template: default
        template_format: slack
        violation_desc: "Access key last rotated over 90 days detected."
        action_desc: "Please rotate access keys to comply with 90-day policy."
        to:
          - "${SLACK_WEBHOOK_URL}"
        transport:
          type: sqs
          queue: https://sqs.ap-northeast-2.amazonaws.com/311278774159/custodian-my-queue

  ## action
  # 29) iam_securityaudit_role_created
  # ISMS-P: 2.1.3 Identity Management
  # PURPOSE: Ensure SecurityAudit role exists
  # ACTION PLAN: Invoke remediation Lambda, then send Slack notification
  - name: iam_securityaudit_role_created
    description: |
      Detects absence of the SecurityAudit role,
      then posts a Slack notification.
    resource: aws.iam-role
    mode:
      type: periodic
      schedule: "rate(50 days)"
      role: arn:aws:iam::311278774159:role/custodian-my-role
    filters: []
    actions:
      - type: invoke-lambda
        function: arn:aws:lambda:ap-northeast-2:311278774159:function:ensureSecurityAuditFunction
      - type: notify
        template: default
        template_format: slack
        violation_desc: "SecurityAudit role has been ensured (created if missing)."
        action_desc: "ensureSecurityAuditFunction invoked."
        to:
          - "${SLACK_WEBHOOK_URL}"
        transport:
          type: sqs
          queue: https://sqs.ap-northeast-2.amazonaws.com/311278774159/custodian-my-queue

  ## action
  # 30) iam_support_role_created
  # ISMS-P: 2.1.3 Identity Management
  # PURPOSE: Ensure Support role exists
  # ACTION PLAN: Invoke remediation Lambda, then send Slack notification
  - name: iam_support_role_created
    description: |
      Detects absence of the IAM Support role,
      then posts a Slack notification.
    resource: aws.iam-role
    mode:
      type: periodic
      schedule: "rate(50 days)"
      role: arn:aws:iam::311278774159:role/custodian-my-role
    filters: []
    actions:
      - type: invoke-lambda
        function: arn:aws:lambda:ap-northeast-2:311278774159:function:ensureSupportRoleFunction
      - type: notify
        template: default
        template_format: slack
        violation_desc: "Support role has been ensured (created if missing)."
        action_desc: "ensureSupportRoleFunction invoked."
        to:
          - "${SLACK_WEBHOOK_URL}"
        transport:
          type: sqs
          queue: https://sqs.ap-northeast-2.amazonaws.com/311278774159/custodian-my-queue

  # 31) iam_user_accesskey_unused
  # ISMS-P: 2.4.1 Identity Management
  # PURPOSE: Ensure access keys are used regularly
  # ACTION PLAN: Slack notification only
  - name: iam_user_accesskey_unused
    description: |
      Detects IAM users whose access keys have not been used for over 90 days,
      then posts a Slack notification.
    resource: aws.iam-user
    mode:
      type: periodic
      schedule: "rate(20 days)"
      role: arn:aws:iam::311278774159:role/custodian-my-role
    filters:
      - type: credential
        key: access_keys.last_used_date
        op: lt
        value: 90
    actions:
      - type: notify
        template: default
        template_format: slack
        violation_desc: "Access key unused for > 90 days."
        action_desc: "Please review and deactivate unused access keys."
        to:
          - "${SLACK_WEBHOOK_URL}"
        transport:
          type: sqs
          queue: https://sqs.ap-northeast-2.amazonaws.com/311278774159/custodian-my-queue

  # 32) iam_user_administrator_access_policy
  # ISMS-P: 2.4.3 Access Management
  # PURPOSE: Ensure no IAM user has AdministratorAccess
  # ACTION: Slack notification only
  - name: iam_user_administrator_access_policy
    description: |
      Detects IAM users with the AdministratorAccess policy,
      then posts a Slack notification.
    resource: aws.iam-user
    mode:
      type: periodic
      schedule: "rate(5 minutes)"
      role: arn:aws:iam::311278774159:role/custodian-my-role
    filters:
      - type: value
        key: AttachedManagedPolicies[].PolicyName
        op: contains
        value: AdministratorAccess
    actions:
      - type: notify
        template: default
        template_format: slack
        violation_desc: "User with AdministratorAccess detected."
        action_desc: |
          IAM user `{{ user.user_name }}` has the AdministratorAccess policy attached.
          Please detach this policy in the IAM console if appropriate.
        to:
          - "${SLACK_WEBHOOK_URL}"
        transport:
          type: sqs
          queue: https://sqs.ap-northeast-2.amazonaws.com/311278774159/custodian-my-queue

  # 33) iam_user_hardware_mfa_enabled
  # ISMS-P: 2.4.2 Multi-Factor Authentication
  # PURPOSE: Ensure IAM users have hardware MFA
  # ACTION: Send a Slack alert via SQS
  - name: iam_user_hardware_mfa_enabled
    description: |
      Detects IAM users without any hardware MFA device,
      then posts a Slack notification.
    resource: aws.iam-user
    mode:
      type: periodic
      schedule: "rate(20 days)"
      role: arn:aws:iam::311278774159:role/custodian-my-role
    filters:
      - type: value
        key: MfaDevices
        op: eq
        value: 0
        value_type: size
    actions:
      - type: notify
        template: default
        template_format: slack
        violation_desc: "User without hardware MFA detected."
        action_desc: |
          Confirm hardware MFA is enrolled for this user in the IAM console.
        to:
          - "${SLACK_WEBHOOK_URL}"
        transport:
          type: sqs
          queue: https://sqs.ap-northeast-2.amazonaws.com/311278774159/custodian-my-queue

  # 34) iam_user_mfa_enabled_console_access
  # ISMS-P: 2.4.2 Multi-Factor Authentication
  # PURPOSE: Enforce MFA for console access
  # ACTION: detect only
  - name: iam_user_mfa_enabled_console_access
    description: |
      Detects IAM users without any active MFA devices.
    resource: aws.iam-user
    filters:
      - type: credential
        key: mfa_active
        op: equal
        value: false
    actions: []

  # 35) iam_user_no_setup_initial_access_key
  # ISMS-P: 2.4.1 Identity Management
  # PURPOSE: Prevent initial access key setup for console users
  # ACTION PLAN: detect only
  - name: iam_user_no_setup_initial_access_key
    description: |
      Detects console-only users retaining their initial access keys.
    resource: aws.iam-user
    mode:
      type: periodic
      schedule: "rate(100 days)"
      role: arn:aws:iam::311278774159:role/custodian-my-role
    filters:
      - type: value
        key: AccessKeyMetadata
        op: gt
        value: 0
        value_type: size
    actions: [] 

  # 36) iam_user_two_active_access_key
  # ISMS-P: 2.4.1 Identity Management
  # PURPOSE: Prevent users from having two active access keys
  # ACTION: detect only
  - name: iam_user_two_active_access_key
    description: |
      Detects IAM users with two active access keys.
    resource: aws.iam-user
    filters:
      - type: credential
        key: access_keys.active
        op: gt
        value: 1
        value_type: size
    actions: []

  # 37) iam_user_console_access_unused
  # ISMS-P: 2.4.1 Identity Management
  # PURPOSE: Flag console-only users
  # ACTION: Send a Slack alert via SQS (no automatic remediation)
  - name: iam_user_console_access_unused
    description: |
      Detects IAM users who have console access but have never used their access keys,
      then posts a Slack notification.
    resource: aws.iam-user
    mode:
      type: periodic
      schedule: "rate(20 days)"
      role: arn:aws:iam::311278774159:role/custodian-my-role
    filters:
      - type: credential
        key: access_keys.active
        op: eq
        value: null
    actions:
      - type: notify
        template: default
        template_format: slack
        violation_desc: "Console-only user detected (no access key usage)."
        action_desc: |
          Notify that this user has console-only access without key usage.
          Please review and disable or flag as appropriate in the IAM console.
        to:
          - "${SLACK_WEBHOOK_URL}"
        transport:
          type: sqs
          queue: https://sqs.ap-northeast-2.amazonaws.com/311278774159/custodian-my-queue


  # 38) iam_user_with_temporary_credentials
  # ISMS-P: 2.4.2 Multi-Factor Authentication & Temporary Credentials
  # PURPOSE: Identify users with STS credentials
  # ACTION: Send a Slack alert via SQS (no automatic remediation)
  - name: iam_user_with_temporary_credentials
    description: |
      Detects IAM users who have active temporary credentials (STS),
      then posts a Slack notification.
    resource: aws.iam-user
    mode:
      type: periodic
      schedule: "rate(20 days)"
      role: arn:aws:iam::311278774159:role/custodian-my-role
    filters:
      - type: credential
        key: access_keys.active
        op: contains
        value: "STS"
    actions:
      - type: notify
        template: default
        template_format: slack
        violation_desc: "User with temporary STS credentials detected."
        action_desc: |
          Temporary STS credentials detected for this user.
          Please audit or revoke them in the IAM console.
        to:
          - "${SLACK_WEBHOOK_URL}"
        transport:
          type: sqs
          queue: https://sqs.ap-northeast-2.amazonaws.com/311278774159/custodian-my-queue

